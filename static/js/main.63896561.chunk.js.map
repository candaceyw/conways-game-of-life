{"version":3,"sources":["components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","Grid","useState","grid","setGrid","generation","setGeneration","running","setRunning","runningRef","useRef","current","generationRef","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","randColor1","Math","floor","random","randColor2","randColor3","onClick","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63896561.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport { gliderGun, gliderArray, oscillators, spaceships } from './Presets';\n\nconst numRows = 50;\nconst numCols = 50;\nconst speed = 100;\n\nconst operations = [\n\t[0, 1],\n\t[0, -1],\n\t[1, -1],\n\t[-1, 1],\n\t[1, 1],\n\t[-1, -1],\n\t[1, 0],\n\t[-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n\tconst rows = [];\n\tfor (let i = 0; i < numRows; i++) {\n\t\trows.push(Array.from(Array(numCols), () => 0));\n\t}\n\n\treturn rows;\n};\n\nconst Grid = () => {\n\tconst [grid, setGrid] = useState(() => {\n\t\treturn generateEmptyGrid();\n\t});\n\tconst [generation, setGeneration] = useState(0);\n\n\tconst [running, setRunning] = useState(false);\n\n\tconst runningRef = useRef(running);\n\trunningRef.current = running;\n\n\tconst generationRef = useRef(generation);\n\tgenerationRef.current = generation;\n\n\tconst runSimulation = useCallback(() => {\n\t\tif (!runningRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetGrid((g) => {\n\t\t\treturn produce(g, (gridCopy) => {\n\t\t\t\tfor (let i = 0; i < numRows; i++) {\n\t\t\t\t\tfor (let k = 0; k < numCols; k++) {\n\t\t\t\t\t\tlet neighbors = 0;\n\t\t\t\t\t\toperations.forEach(([x, y]) => {\n\t\t\t\t\t\t\tconst newI = i + x;\n\t\t\t\t\t\t\tconst newK = k + y;\n\t\t\t\t\t\t\tif (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n\t\t\t\t\t\t\t\tneighbors += g[newI][newK];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (neighbors < 2 || neighbors > 3) {\n\t\t\t\t\t\t\tgridCopy[i][k] = 0;\n\t\t\t\t\t\t} else if (g[i][k] === 0 && neighbors === 3) {\n\t\t\t\t\t\t\tgridCopy[i][k] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tsetGeneration(++generationRef.current);\n\t\tsetTimeout(runSimulation, 100);\n\t}, []);\n\n\tconst randColor1 = Math.floor(Math.random() * Math.floor(255));\n\tconst randColor2 = Math.floor(Math.random() * Math.floor(255));\n\tconst randColor3 = Math.floor(Math.random() * Math.floor(255));\n\n\treturn (\n\t\t<>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetRunning(!running);\n\t\t\t\t\tif (!running) {\n\t\t\t\t\t\trunningRef.current = true;\n\t\t\t\t\t\trunSimulation();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{running ? 'stop' : 'start'}\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tconst rows = [];\n\t\t\t\t\tfor (let i = 0; i < numRows; i++) {\n\t\t\t\t\t\trows.push(\n\t\t\t\t\t\t\tArray.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tsetGrid(rows);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\trandom\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetGrid(generateEmptyGrid());\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tclear\n\t\t\t</button>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'grid',\n\t\t\t\t\tgridTemplateColumns: `repeat(${numCols}, 20px)`,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{grid.map((rows, i) =>\n\t\t\t\t\trows.map((col, k) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={`${i}-${k}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconst newGrid = produce(grid, (gridCopy) => {\n\t\t\t\t\t\t\t\t\tgridCopy[i][k] = grid[i][k] ? 0 : 1;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tsetGrid(newGrid);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: 20,\n\t\t\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\t\t\tbackgroundColor: grid[i][k]\n\t\t\t\t\t\t\t\t\t? `rgb(${randColor1}, ${randColor2}, ${randColor3})`\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\tborder: 'solid 1px black',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<h2>Generations: {generation}</h2>\n\t\t</>\n\t);\n};\n\nexport default Grid;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1> The Game of Life </h1>\n\t\t\t<Grid />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}